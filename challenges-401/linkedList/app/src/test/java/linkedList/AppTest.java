/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void insertTest(){
        LinkedList<Integer> list=new LinkedList<Integer>();


        list.insert(4);
        list.insert(8);
        list.insert(7);
        list.insert(9);
        list.insert(10);
        assertEquals("{10}=>{9}=>{7}=>{8}=>{4}=>NULL!",list.toString(),"it should return these numbers {10}=>{9}=>{7}=>{8}=>{4}=>NULL! ");

    }
    @Test void includesTest(){
        LinkedList<Integer> list=new LinkedList<Integer>();
        list.insert(5);

        assertTrue(list.includes(5),"it should return the new number");
    }



    @Test void appendValueTest(){
        LinkedList<Integer> list=new LinkedList<>();
        list.insert(4);
        list.insert(8);
        list.insert(7);
        list.insert(9);
        list.insert(10);
        list.appendValue(3);
        assertEquals("{10}=>{9}=>{7}=>{8}=>{4}=>{3}=>NULL!",list.toString());

    }

    @Test void insertBeforeTest(){
        LinkedList<Integer> list=new LinkedList<>();
        list.insert(4);
        list.insert(8);
        list.insert(7);
        list.insert(9);
        list.insert(10);
        list.appendValue(3);
        list.insertBefore(7,5);
        assertEquals("{10}=>{9}=>{5}=>{7}=>{8}=>{4}=>{3}=>NULL!",list.toString());

    }
    @Test void insertAfterTest(){
        LinkedList<Integer> list=new LinkedList<>();
        list.insert(4);
        list.insert(8);
        list.insert(7);
        list.insert(9);
        list.insert(10);
        list.appendValue(3);
        list.insertBefore(7,5);
        list.insertAfter(8,1);
        assertEquals("{10}=>{9}=>{5}=>{7}=>{8}=>{1}=>{4}=>{3}=>NULL!",list.toString());

    }

    @Test void toStringTest(){
        LinkedList<Integer> list=new LinkedList<>();
        list.insert(4);
        list.insert(8);
        list.insert(7);
        list.insert(9);
        list.insert(10);
        list.appendValue(3);
        list.insertBefore(7,5);
        list.insertAfter(8,1);
        assertEquals("{10}=>{9}=>{5}=>{7}=>{8}=>{1}=>{4}=>{3}=>NULL!",list.toString());

    }

    @Test void kthFromEndTest(){
        LinkedList<Integer> list=new LinkedList<>();
        list.insert(4);
        list.insert(8);
        list.insert(7);
        list.insert(9);
        list.insert(10);
        list.appendValue(3);
        list.insertBefore(7,5);
        list.insertAfter(8,1);
        list.kthFromEnd(5);


        assertNotNull("7 is the 5th value before the head","It should return this: 7 is the 5th value before the head ");


    }
    @Test void zipListsTest(){
        LinkedList<Integer> list1=new LinkedList<>();
        LinkedList<Integer> list2=new LinkedList<>();
        LinkedList<Integer> list3=new LinkedList<>();


        list1.insert(1);
        list1.insert(3);
        list1.insert(5);
        list1.insert(7);
        list1.insert(9);
        list1.insert(11);

        list2.insert(0);
        list2.insert(2);
        list2.insert(4);
        list2.insert(6);
        list2.insert(8);
        list2.insert(10);

        list3.zipLists(list1,list2);

        assertNotNull("{0}=>{1}=>{2}=>{3}=>{4}=>{5}=>{6}=>{7}=>{8}=>{9}=>{10}=>{11}=>NULL!","It should return this:{0}=>{1}=>{2}=>{3}=>{4}=>{5}=>{6}=>{7}=>{8}=>{9}=>{10}=>{11}=>NULL!" );

    }
    // stack tests:

    @Test void pushTest(){
        Stack<Integer> stack=new Stack<>();

        stack.push(2);
        stack.push(6);
        stack.push(4);
        stack.push(7);

        assertEquals("{7}=>{4}=>{6}=>{2}=>NULL!",stack.toString(),"it should show this:{7}=>{4}=>{6}=>{2}=>NULL!");
    }
    @Test void popTest(){
        Stack<Integer> stack=new Stack<>();

        stack.push(2);
        stack.push(6);
        stack.push(4);
        stack.push(7);
        stack.pop();

        assertEquals("{4}=>{6}=>{2}=>NULL!",stack.toString(),"it should show this:{4}=>{6}=>{2}=>NULL!");
    }
    @Test void stackIsEmptyTest(){
        Stack<Integer> stack=new Stack<>();

        stack.push(2);
        stack.push(6);
        stack.push(4);

        stack.pop();
        stack.pop();
        stack.pop();

        assertTrue(stack.isEmpty());
    }

    @Test void stackPeek(){
        Stack<Integer> stack=new Stack<>();

        stack.push(2);
        stack.push(6);
        stack.push(4);
        stack.push(7);

        assertEquals(7,stack.peek(),"it should return the peak");
    }

    // Queue tests:

        @Test void EnqueueTest(){
        Queue<Integer> queue=new Queue<>();

        queue.Enqueue(3);
        queue.Enqueue(6);
        queue.Enqueue(8);
        queue.Enqueue(15);

        assertEquals("{3}=>{6}=>{8}=>{15}=>NULL!",queue.toString(),"it should show this:{3}=>{6}=>{8}=>{15}=>NULL!!");
    }

    @Test void dequeueTest(){
        Queue<Integer> queue=new Queue<>();

        queue.Enqueue(3);
        queue.Enqueue(6);
        queue.Enqueue(8);
        queue.Enqueue(15);

        queue.Dequeue();
        queue.Dequeue();

        assertEquals("{8}=>{15}=>NULL!",queue.toString(),"it should show this:{8}=>{15}=>NULL!");
    }

    @Test void  queueIsEmptyTest(){
        Queue<Integer> queue=new Queue<>();

        queue.Enqueue(3);
        queue.Enqueue(6);
        queue.Enqueue(8);
        queue.Enqueue(15);

        queue.Dequeue();
        queue.Dequeue();
        queue.Dequeue();
        queue.Dequeue();

        assertTrue(queue.isEmpty());
    }
    @Test void queuePeek(){
        Queue<Integer> queue=new Queue<>();

        queue.Enqueue(3);
        queue.Enqueue(6);
        queue.Enqueue(8);
        queue.Enqueue(15);


        assertEquals(3,queue.peek(),"it should return the peak");
    }



}
